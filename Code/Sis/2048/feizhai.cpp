//所有程序所需的库
#include <iostream>
#include <cstdlib>//产生随机数用    rand()
#include <ctime>//产生随机数用  ，可以产生一个种子。
#include <conio.h>//getch使用的库
#include <cmath>
#include <iomanip>//setw()函数使用的库


#include <windows.h>//颜色
#include <stdio.h>//颜色
#include <stdlib.h>//颜色

using namespace std;

//DISPLAY显示相关
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：显示器 displayout()
.					作用：分行显示二维数组的内容。
.					输入值：1.需要输出的数组。		2.是否清空屏幕（0为清空）
.					类型：void
.					返回值：无。

*//////////////////////////////////////////////////////////////////////////////
void displayout(int a[][4], int score, int clean);

//PLAY游戏操作相关
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（上）   int up(int (*a)[4])
.					作用：计算向上运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int up(int(*a)[4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（下）   int down(int (*a)[4])
.					作用：计算向下运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int down(int(*a)[4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（左）   int left(int (*a)[4])
.					作用：计算向左运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int left(int(*a)[4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（右）   int rigut(int (*a)[4])
.					作用：计算向右运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int right(int(*a)[4]);

//SWAP交换横纵相关
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：纵横变换   void xtoy(int (*a)[4])
.					作用：将数组由纵向变为横向，颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void xtoy(int(*a)[4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：横向变换   void xtox(int (*a)[4])
.					作用：将数组横向颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void xtox(int(*a)[4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：纵向变换   void ytoy(int (*a)[4])
.					作用：将数组纵向颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void ytoy(int(*a)[4]);

//RANDOM随机函数相关
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：随机数产生器 suiji()
.					作用：随机数产生器。
.					输入值：给定一个上限值，或者给定上限下限值。
.					类型：int
.					返回值：给定范围的随机数。

*//////////////////////////////////////////////////////////////////////////////
int suiji(int b);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：随机数产生器 suiji()
.					作用：随机数产生器。
.					输入值：给定一个上限值，或者给定上限下限值。
.					类型：int
.					返回值：给定范围的随机数。

*//////////////////////////////////////////////////////////////////////////////
int suiji(int a, int b);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：二或四随机生成器 torf()	实际上是twoorfour的缩写
.					作用：随机生成  2  或者  4  。
.					输入值：无
.					类型：int
.					返回值：2或者4。

*//////////////////////////////////////////////////////////////////////////////
int torf();
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：方格随机选择器   putin(int(*a)[4],int quantity)
.					作用：随机指定4*4区域内的一个方格，并且判断方格是否为空，如果为空，则输入2或者4
.					输入值：1.指定的4*4的方格		2.要指定输入的方格的数量
.					类型：void
.					返回值：无。

*//////////////////////////////////////////////////////////////////////////////
void putin(int(*a)[4], int quantity);

//GAMEOVER判断相关函数
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（横向）   bool gameoverleft(int(*a)[4])
.					作用：从横向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（游戏可以继续）     或      1 = ture（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverleft(int a[][4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（纵向）   bool gameoverup(int(*a)[4])
.					作用：从纵向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0（游戏可以继续）     或      1（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverup(int a[][4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏空位检查器   bool vacancy(int a[][4])
.					作用：判断游戏中是否有空位。
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（有空位）     或      1 = ture（没有空位）。

*//////////////////////////////////////////////////////////////////////////////
bool vacancy(int a[][4]);
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏结束主函数   bool gameover(int a[][4])
.					作用：判断游戏是否可以继续运行。
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（游戏可以继续）     或      1 = ture（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameover(int a[][4]);

//SCORE分数相关
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：分数计算器  int fun_score(int cycle, int add_score, int score)
.					作用：计算分数。
.					输入值：1.主程序运算次数      2.由play所导出的需要加的分数        3.原分数
.					类型：int
.					返回值：  score，分数。

*//////////////////////////////////////////////////////////////////////////////
int fun_score(int cycle, int add_score, int score);

//INPUT游戏输入按键相关
/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏键入器   void game_input(int(*a)[4])
.					作用：判断游戏输入，并指向PLAY游戏相关函数
.					输入值：1.主函数的4*4的数组      2.循环次数cycle
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int game_input(int(*a)[4], int cycle);





/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：主函数main()
.					作用：程序入口。
.					输入值：五
.					类型：int
.					返回值：正确运行为“0”。

*//////////////////////////////////////////////////////////////////////////////
int main(){
	srand(time(0));//为后续的随机函数   设定随机数种子
	int a[4][4] = { 0 };
	int cycle = 0;
	int score = 0;
	int add_score = 0;
	putin(a, suiji(2, 3));//初始化游戏数据(给出初始值）
	while (1){
		score = fun_score(cycle, add_score, score);
		if (gameover(a)) {
			displayout(a, score, 0);
			cout << endl;
			cout << "游戏结束，请按“回车”键退出" << endl;
			getchar();
			break;
		}
		displayout(a, score, 0);
		add_score = game_input(a, cycle);
		if (add_score != -1) {
			putin(a, 1);
		}
		cycle++;
	}
	return 0;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：显示器 displayout(int a[][4], int score, int clean)
.					作用：分行显示二维数组的内容。
.					输入值：1.需要输出的数组。		2.是否清空屏幕（0为清空）
.					类型：void
.					返回值：无。

*//////////////////////////////////////////////////////////////////////////////
void displayout(int a[][4], int score, int clean) {
	int num;
	HANDLE hOut;
	//  获取输出流的句柄
	hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	if (clean == 0) {
		system("CLS");
	}
	else if (clean == 1) {}
	else {
		cout << "clean参数错误" << endl;
		goto close;
	}
	int i, j;
	SetConsoleTextAttribute(hOut,
		FOREGROUND_RED |        // 前景色_红色
		BACKGROUND_GREEN);      // 背景色_绿色

	cout << "********************************************" << endl;
	cout << "***************2 0 4 8 游 戏****************" << endl;
	cout << "********************************************" << endl;
	SetConsoleTextAttribute(hOut,
		FOREGROUND_RED |        // 前景色_红色
		BACKGROUND_BLUE |
		BACKGROUND_GREEN);      // 背景色_浅蓝色
	cout << "   +--------+--------+--------+--------+    " << endl;
	for (i = 0; i <= 3; i++) {
		cout << "   |        |        |        |        |    " << endl;
		cout << "   |";
		for (j = 0; j <= 3; j++) { if (j > 0) {
				cout << "|";
			}
			if (a[i][j] != 0) {
				cout << setw(5) << a[i][j];
			}
			else {
				cout << "     ";
			}
			cout << "   ";
		}
		cout << "|    " << endl;
		cout << "   |        |        |        |        |    " << endl;
		cout << "   +--------+--------+--------+--------+    " << endl;
	}
	SetConsoleTextAttribute(hOut,
		FOREGROUND_RED |        // 前景色_红色
		FOREGROUND_INTENSITY |
		BACKGROUND_GREEN | BACKGROUND_RED);//背景色_黄色
	cout << "                                            " << endl;
	cout << "你获得的分数是：" << setw(6) << score << "                      " << endl;
	cout << "                                            " << endl;
	SetConsoleTextAttribute(hOut, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);
close:;
}



/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏结束主函数   bool gameover(int a[][4])
.					作用：判断游戏是否可以继续运行。
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（游戏可以继续）     或      1 = ture（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameover(int a[][4]) {
	int NS, EW;
	NS = gameoverup(a);
	EW = gameoverleft(a);
	if (NS == 1 && EW == 1) {
		return 1;
	}
	else {
		return 0;
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（横向）   bool gameoverleft(int(*a)[4])
.					作用：从横向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（游戏可以继续）     或      1 = ture（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverleft(int a[][4]) {
	int x, y;
	if (vacancy(a)) {//如果没有空位，则进行下一步的判断
		for (y = 0; y < 4; y++) {
			for (x = 0; x < 3; x++) {
				if (a[y][x] == a[y][x + 1]) {
					return 0;//游戏还可以进行下去
				}
			}
		}
	}
	else {
		return 0;
	}
	return 1;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏失败判断器（纵向）   bool gameoverup(int(*a)[4])
.					作用：从纵向的角度判断游戏是否结束
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0（游戏可以继续）     或      1（游戏失败）。

*//////////////////////////////////////////////////////////////////////////////
bool gameoverup(int a[][4]) {
	int x, y;
	if (vacancy(a)) {//如果没有空位，则进行下一步的判断
		for (x = 0; x < 4; x++) {
			for (y = 0; y < 3; y++) {
				if (a[y][x] == a[y + 1][x]) {
					return 0;//游戏还可以进行下去
				}
			}
		}
	}
	else {
		return 0;
	}
	return 1;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏空位检查器   bool vacancy(int a[][4])
.					作用：判断游戏中是否有空位。
.					输入值：1.需要判断的4*4的数组
.					类型：bool
.					返回值：  0 = fause（有空位）     或      1 = ture（没有空位）。

*//////////////////////////////////////////////////////////////////////////////
bool vacancy(int a[][4]) {
	int x, y;
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] == 0) {//判断还有没有空位了
				return 0;//如果还有空位，则游戏可以继续运行
			}
		}
	}
	return 1;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏键入器   void game_input(int(*a)[4])
.					作用：判断游戏输入，并指向PLAY游戏相关函数
.					输入值：1.主函数的4*4的数组      2.循环次数cycle
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int game_input(int(*a)[4], int cycle) {
	if (cycle > 0) {
		_getch();//清空键盘缓存区
	}
	char wasd;
	int add_score = 0;
wasd_wrong:;//在36行
	cout << endl << "请输入wasd代表方向" << endl;
	wasd = _getch();
	switch (wasd) {
	case ('w'):add_score = up(a); break;
	case ('a'):add_score = left(a); break;
	case ('s'):add_score = down(a); break;
	case ('d'):add_score = right(a); break;
	default:
		cout << "输入错误，请输入“w”“a”“s”“d”" << endl;
		_getch();
		goto wasd_wrong;//在25行
		break;
	}
	return add_score;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（左）   int left(int (*a)[4])
.					作用：计算向左运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int left(int(*a)[4]) {
	int can_play[4][4];
	int x = 0, y = 0;
	int m = 0, n = 0;
	int i = 0, j = 0, k = 0;
	int add_score = 0;
	int judge = 0;
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			can_play[y][x] = a[y][x];
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (a[y][x] != 0) {
				for (i = 1; i <= 3 - x; i++) {
					if (a[y][x] == a[y][x + i]) {
						if (i == 1) {
							a[y][x] = a[y][x] * 2;
							a[y][x + i] = 0;
							add_score += a[y][x];
						}
						else if (i == 2) {
							if (a[y][x + 1] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								add_score += a[y][x];
							}
						}
						else {
							if (a[y][x + 1] == 0 && a[y][x + 2] == 0) {
								a[y][x] = a[y][x] * 2;
								a[y][x + i] = 0;
								add_score += a[y][x];
							}
						}
						i = 999;//防止多次运算，
						x = x + 1;//防止多次运算，
					}
				}
			}
		}
	}
	for (k = 0; k < 3; k++) {
		for (y = 0; y <= 3; y++) {
			for (x = 0; x <= 3; x++) {
				if (a[y][x] == 0 && a[y][x + 1] != 0 && x + 1 <= 3) {
					a[y][x] = a[y][x + 1];
					a[y][x + 1] = 0;
				}
			}
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			if (can_play[y][x] == a[y][x]) {
				judge++;
			}
		}
	}
	if (judge == 16) {
		return -1;
	}
	return add_score;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（上）   int up(int (*a)[4])
.					作用：计算向上运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int up(int(*a)[4]) {
	int add_score_temp = 0;
	xtoy(a);
	add_score_temp = left(a);
	xtoy(a);
	return add_score_temp;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（右）   int rigut(int (*a)[4])
.					作用：计算向右运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int right(int(*a)[4]) {
	int add_score_temp = 0;
	xtox(a);
	add_score_temp = left(a);
	xtox(a);
	return add_score_temp;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：游戏步骤（下）   int down(int (*a)[4])
.					作用：计算向下运行的结果，并重新排序
.					输入值：1.需要计算的4*4的数组
.					类型：int
.					返回值：需要相加的分数。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
int down(int(*a)[4]) {
	int add_score_temp = 0;
	ytoy(a);
	xtoy(a);
	add_score_temp = left(a);
	xtoy(a);
	ytoy(a);
	return add_score_temp;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：随机数产生器 suiji()
.					作用：随机数产生器。
.					输入值：给定一个上限值，或者给定上限下限值。
.					类型：int
.					返回值：给定范围的随机数。

*//////////////////////////////////////////////////////////////////////////////
int suiji(int b) {
	b++;
	int temp;
	temp = rand();
	return temp % b;
}

int suiji(int a, int b) {
	int temp;
	b++;
	while (1) {
		temp = rand();
		if (temp % b >= a) {
			break;
		}
	}
	return temp % b;
}



/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：二或四随机生成器 torf()	实际上是twoorfour的缩写
.					作用：随机生成  2  或者  4  。
.					输入值：无
.					类型：int
.					返回值：2或者4。

*//////////////////////////////////////////////////////////////////////////////
int torf() {
	if (suiji(1) == 1) {
		return 2;
	}
	else {
		return 4;
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：方格随机选择器   putin(int(*a)[4],int quantity)
.					作用：随机指定4*4区域内的一个方格，并且判断方格是否为空，如果为空，则输入2或者4
.					输入值：1.指定的4*4的方格		2.要指定输入的方格的数量
.					类型：void
.					返回值：无。

*//////////////////////////////////////////////////////////////////////////////
void putin(int(*a)[4], int quantity) {
	int x, y, j;
	for (j = 1; j <= quantity; j++) {
		while (1) {
			x = suiji(4);
			y = suiji(4);
			if (a[y][x] == 0) {
				a[y][x] = torf();
				break;
			}
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：分数计算器  int fun_score(int cycle, int add_score, int score)
.					作用：计算分数。
.					输入值：1.主程序运算次数      2.由play所导出的需要加的分数        3.原分数
.					类型：int
.					返回值：  score，分数。

*//////////////////////////////////////////////////////////////////////////////
int fun_score(int cycle, int add_score, int score) {
	if (add_score != -1) {
		if (cycle > 0) {
			score += add_score;
		}
		else {
			score = 0;
		}
	}
	return score;
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：纵横变换   void xtoy(int (*a)[4])
.					作用：将数组由纵向变为横向，颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void xtoy(int(*a)[4]) {
	int x = 0, y = 0;
	int temp[4][4];
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			temp[x][y] = a[y][x];
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			a[y][x] = temp[y][x];
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：横向变换   void xtox(int (*a)[4])
.					作用：将数组横向颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void xtox(int(*a)[4]) {
	int x = 0, y = 0;
	int temp[4][4];
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			temp[y][3 - x] = a[y][x];
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			a[y][x] = temp[y][x];
		}
	}
}


/*/////////////////////////////////////////////////////////////////////////////

.			函数	名称：纵向变换   void ytoy(int (*a)[4])
.					作用：将数组纵向颠倒位置
.					输入值：1.需要计算的4*4的数组
.					类型：void
.					返回值：无。备注：会直接修改主函数里的数组。

*//////////////////////////////////////////////////////////////////////////////
void ytoy(int(*a)[4]) {
	int x = 0, y = 0;
	int temp[4][4];
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			temp[3 - y][x] = a[y][x];
		}
	}
	for (y = 0; y < 4; y++) {
		for (x = 0; x < 4; x++) {
			a[y][x] = temp[y][x];
		}
	}
}
